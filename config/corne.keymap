/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
        };

        telegram {
            bindings = <&kp LS(LA(LC(LG(E))))>;
            key-positions = <38 37>;
        };
    };

    behaviors {
        moAndKp: moAndKp {
            compatible = "zmk,behavior-hold-tap";
            label = "MOANDKP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
        };

        kpAndCaps: kpAndCaps {
            compatible = "zmk,behavior-hold-tap";
            label = "KPANDCAPS";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
        };

        kpAndKp: kpAndKp {
            compatible = "zmk,behavior-hold-tap";
            label = "KPANDKP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                              &kp Q  &kp W  &kp E     &kp R                         &kp T        &kp Y    &kp U                 &kp I      &kp O    &kp P     &kp BSPC
&kpAndKp LEFT_CONTROL LS(LG(SPACE))  &kp A  &kp S  &kp D     &kp F                         &kp G        &kp H    &kp J                 &kp K      &kp L    &kp SEMI  &kp SQT
&kpAndCaps LSHFT 0                   &kp Z  &kp X  &kp C     &kp V                         &kp B        &kp N    &kp M                 &kp COMMA  &kp DOT  &kp FSLH  &gresc
                                                   &kp LGUI  &moAndKp 1 LS(LA(LC(LG(T))))  &kp SPACE    &kp RET  &moAndKp 2 RG(SPACE)  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BTG |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB                  &kp N1        &kp N2        &kp N3                 &kp N4                 &kp N5                   &kp N6    &kp N7    &kp N8    &kp N9     &kp N0    &kp BSPC
&bt BT_CLR               &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2           &bt BT_SEL 3           &out OUT_TOG             &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &kp RALT  &kp RSHFT
&kpAndCaps LEFT_SHIFT 0  &trans        &trans        &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(B))))  &kp LS(LA(LC(LG(C))))    &trans    &trans    &trans    &trans     &trans    &trans
                                                     &kp LGUI               &trans                 &kp SPACE                &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB              &kp EXCL  &kp AT  &kp HASH    &kp DLLR           &kp PRCNT       &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL            &trans    &trans  &kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOL_UP    &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kpAndCaps LSHIFT 0  &trans    &trans  &kp C_PREV  &kp C_PP           &kp C_NEXT      &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                                       &kp LGUI    &trans             &kp SPACE       &kp RET    &trans     &kp RALT
            >;
        };
    };
};
